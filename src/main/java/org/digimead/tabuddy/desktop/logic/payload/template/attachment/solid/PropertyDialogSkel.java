/**
 * SolidAttachment element template for TABuddy-Desktop.
 *
 * Copyright (c) 2013 Alexey Aksenov ezh@ezh.msk.ru
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Global License version 3
 * as published by the Free Software Foundation with the addition of the
 * following permission added to Section 15 as permitted in Section 7(a):
 * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED
 * BY Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS»,
 * Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS» DISCLAIMS
 * THE WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Global License for more details.
 * You should have received a copy of the GNU Affero General Global License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA, or download the license from the following URL:
 * http://www.gnu.org/licenses/agpl.html
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Global License.
 *
 * In accordance with Section 7(b) of the GNU Affero General Global License,
 * you must retain the producer line in every report, form or document
 * that is created or manipulated using TABuddy.
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the TABuddy software without
 * disclosing the source code of your own applications.
 * These activities include: offering paid services to customers,
 * serving files in a web or/and network application,
 * shipping TABuddy with a closed source product.
 *
 * For more information, please contact Digimead Team at this
 * address: ezh@ezh.msk.ru
 */

package org.digimead.tabuddy.desktop.logic.payload.template.attachment.solid;

import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.TitleAreaDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.SashForm;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.dnd.DND;
import org.eclipse.swt.dnd.DragSource;
import org.eclipse.swt.dnd.DropTarget;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.forms.widgets.FormToolkit;
import org.eclipse.ui.forms.widgets.Section;

/**
 * This file is autogenerated by Google WindowBuilder Pro
 *
 * @author ezh
 */
public class PropertyDialogSkel extends TitleAreaDialog {
	private final FormToolkit toolkit = new FormToolkit(Display.getCurrent());
	private Composite compositeInformation;
	private DragSource dragSourceInfo;
	private DropTarget dropTargetInfo;
	private Label lblLogo;
	private Label lblPreview;
	private ScrolledComposite scrolledCompositeInformation;
	private Section sctnGeneral;
	private Section sctnSummary;
	private Text txtAuthor;
	private Text txtAuthorTitle;
	private Text txtDescription;
	private Text txtDocumentTitle;
	private Text txtFileApplication;
	private Text txtFileCreated;
	private Text txtFileFormat;
	private Text txtFileModified;
	private Text txtFileSize;
	private Label lblDNDTip;
	private Composite compositeLeft;

	/**
	 * Create the dialog.
	 *
	 * @param parentShell
	 */
	public PropertyDialogSkel(Shell parentShell) {
		super(parentShell);
		setShellStyle(SWT.SHELL_TRIM);
	}

	/**
	 * Create contents of the dialog.
	 *
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		setMessage(Messages.dialogMessage_text);
		setTitle(Messages.dialogTitle_text);
		Composite area = (Composite) super.createDialogArea(parent);
		area.addDisposeListener(new DisposeListener() {
			public void widgetDisposed(DisposeEvent e) {
				toolkit.dispose();
			}
		});
		toolkit.adapt(area);

		SashForm sashForm = new SashForm(area, SWT.VERTICAL);
		sashForm.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1,
				1));
		toolkit.adapt(sashForm);

		scrolledCompositeInformation = new ScrolledComposite(sashForm,
				SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
		scrolledCompositeInformation.setExpandVertical(true);
		scrolledCompositeInformation.setExpandHorizontal(true);
		toolkit.adapt(scrolledCompositeInformation);

		compositeInformation = toolkit.createComposite(
				scrolledCompositeInformation, SWT.NONE);
		compositeInformation.setLayout(new GridLayout(2, false));
		scrolledCompositeInformation.setContent(compositeInformation);

		ScrolledComposite scrolledCompositePreview = new ScrolledComposite(
				sashForm, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
		toolkit.adapt(scrolledCompositePreview);
		toolkit.paintBordersFor(scrolledCompositePreview);
		scrolledCompositePreview.setExpandHorizontal(true);
		scrolledCompositePreview.setExpandVertical(true);

		Composite compositePreview = toolkit.createComposite(
				scrolledCompositePreview, SWT.NONE);
		compositePreview.setLayout(new GridLayout(1, false));

		lblPreview = new Label(compositePreview, SWT.NONE);
		lblPreview.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, true,
				true, 1, 1));
		lblPreview.setAlignment(SWT.CENTER);
		toolkit.adapt(lblPreview, true, true);
		scrolledCompositePreview.setContent(compositePreview);

		compositeLeft = new Composite(compositeInformation, SWT.NONE);
		compositeLeft.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false,
				false, 1, 1));
		toolkit.adapt(compositeLeft);
		toolkit.paintBordersFor(compositeLeft);
		compositeLeft.setLayout(new GridLayout(1, false));

		lblLogo = toolkit.createLabel(compositeLeft, null, SWT.BORDER);
		lblLogo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false,
				1, 1));
		lblLogo.setAlignment(SWT.CENTER);

		dropTargetInfo = new DropTarget(compositeInformation, DND.DROP_COPY
				| DND.DROP_MOVE);

		dragSourceInfo = new DragSource(lblLogo, DND.DROP_MOVE | DND.DROP_LINK);

		Composite compositeBody = new Composite(compositeInformation, SWT.NONE);
		compositeBody.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true,
				true, 1, 1));
		toolkit.adapt(compositeBody);
		toolkit.paintBordersFor(compositeBody);
		compositeBody.setLayout(new GridLayout(1, false));

		sctnGeneral = toolkit.createSection(compositeBody, Section.TWISTIE
				| Section.TITLE_BAR);
		sctnGeneral.setLayoutData(new GridData(SWT.FILL, SWT.TOP, false, false,
				1, 1));
		toolkit.paintBordersFor(sctnGeneral);
		sctnGeneral.setText(Messages.general_text);
		sctnGeneral.setExpanded(true);

		Composite compositeGeneral = toolkit.createComposite(sctnGeneral,
				SWT.NONE);
		toolkit.paintBordersFor(compositeGeneral);
		sctnGeneral.setClient(compositeGeneral);
		compositeGeneral.setLayout(new GridLayout(4, false));

		Label lblFileSize = toolkit.createLabel(compositeGeneral,
				Messages.size_text, SWT.NONE);
		lblFileSize.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false,
				false, 1, 1));

		txtFileSize = toolkit.createText(compositeGeneral, "", SWT.READ_ONLY);
		txtFileSize.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true,
				false, 1, 1));

		Label lblFileApplication = toolkit.createLabel(compositeGeneral,
				Messages.application_text, SWT.NONE);
		lblFileApplication.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER,
				false, false, 1, 1));

		txtFileApplication = toolkit.createText(compositeGeneral, "",
				SWT.READ_ONLY);
		txtFileApplication.setLayoutData(new GridData(SWT.FILL, SWT.CENTER,
				true, false, 1, 1));

		Label lblCreated = toolkit.createLabel(compositeGeneral,
				Messages.created_text, SWT.NONE);
		lblCreated.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false,
				false, 1, 1));

		txtFileCreated = toolkit
				.createText(compositeGeneral, "", SWT.READ_ONLY);
		txtFileCreated.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true,
				false, 1, 1));

		Label lblFormat = toolkit.createLabel(compositeGeneral,
				Messages.format_text, SWT.NONE);
		lblFormat.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false,
				false, 1, 1));

		txtFileFormat = toolkit.createText(compositeGeneral, "", SWT.READ_ONLY);
		txtFileFormat.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true,
				false, 1, 1));

		Label lblModified = toolkit.createLabel(compositeGeneral,
				Messages.modified_text, SWT.NONE);
		lblModified.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false,
				false, 1, 1));

		txtFileModified = toolkit.createText(compositeGeneral, "",
				SWT.READ_ONLY);
		txtFileModified.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true,
				false, 1, 1));
		new Label(compositeGeneral, SWT.NONE);
		new Label(compositeGeneral, SWT.NONE);

		sctnSummary = toolkit.createSection(compositeBody, Section.TWISTIE
				| Section.TITLE_BAR);
		sctnSummary.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true,
				false, 1, 1));
		toolkit.paintBordersFor(sctnSummary);
		sctnSummary.setText(Messages.summary_text);
		sctnSummary.setExpanded(true);

		Composite compositeSummary = toolkit.createComposite(sctnSummary,
				SWT.NONE);
		toolkit.paintBordersFor(compositeSummary);
		sctnSummary.setClient(compositeSummary);
		compositeSummary.setLayout(new GridLayout(2, false));

		Label lblDocumentTitle = toolkit.createLabel(compositeSummary,
				Messages.documentTitle_text, SWT.NONE);
		lblDocumentTitle.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER,
				false, false, 1, 1));

		txtDocumentTitle = toolkit.createText(compositeSummary, "", SWT.NONE);
		txtDocumentTitle.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true,
				false, 1, 1));

		Label lblAuthor = toolkit.createLabel(compositeSummary,
				Messages.author_text, SWT.NONE);
		lblAuthor.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false,
				false, 1, 1));

		txtAuthor = toolkit.createText(compositeSummary, "", SWT.NONE);
		txtAuthor.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false,
				1, 1));

		Label lblAuthorTitle = toolkit.createLabel(compositeSummary,
				Messages.author_title_text, SWT.NONE);
		lblAuthorTitle.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false,
				false, 1, 1));

		txtAuthorTitle = toolkit.createText(compositeSummary, "", SWT.NONE);
		txtAuthorTitle.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true,
				false, 1, 1));

		Label lblDescription = toolkit.createLabel(compositeSummary,
				"",//org.digimead.tabuddy.desktop.res.Messages.description_text,
				SWT.NONE);
		lblDescription.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false,
				false, 1, 1));

		txtDescription = toolkit.createText(compositeSummary, "", SWT.NONE);
		txtDescription.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true,
				false, 1, 1));

		lblDNDTip = new Label(compositeInformation, SWT.CENTER);
		lblDNDTip.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false,
				false, 2, 1));
		lblDNDTip.setAlignment(SWT.CENTER);
		toolkit.adapt(lblDNDTip, true, true);
		lblDNDTip.setText(Messages.dndZone_text);

		scrolledCompositePreview.setMinSize(compositePreview.computeSize(
				SWT.DEFAULT, SWT.DEFAULT));

		sashForm.setWeights(new int[] { 1, 1 });

		return area;
	}

	/**
	 * Create contents of the button bar.
	 *
	 * @param parent
	 */
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
	}

	protected Text getTxtFileSize() {
		return txtFileSize;
	}

	protected Text getTxtFileApplication() {
		return txtFileApplication;
	}

	protected Text getTxtFileCreated() {
		return txtFileCreated;
	}

	protected Text getTxtFileFormat() {
		return txtFileFormat;
	}

	protected Text getTxtFileModified() {
		return txtFileModified;
	}

	protected Text getTxtDocumentTitle() {
		return txtDocumentTitle;
	}

	protected Text getTxtAuthor() {
		return txtAuthor;
	}

	protected Text getTxtAuthorTitle() {
		return txtAuthorTitle;
	}

	protected Text getTxtDescription() {
		return txtDescription;
	}

	protected Label getLblPreview() {
		return lblPreview;
	}

	protected Label getLblLogo() {
		return lblLogo;
	}

	protected Section getSctnGeneral() {
		return sctnGeneral;
	}

	protected Section getSctnSummary() {
		return sctnSummary;
	}

	protected ScrolledComposite getScrolledCompositeInformation() {
		return scrolledCompositeInformation;
	}

	protected Composite getCompositeInformation() {
		return compositeInformation;
	}

	protected DragSource getDragSourceInfo() {
		return dragSourceInfo;
	}

	protected DropTarget getDropTargetInfo() {
		return dropTargetInfo;
	}

	protected Label getLblDNDTip() {
		return lblDNDTip;
	}

	protected Composite getCompositeLeft() {
		return compositeLeft;
	}
}
